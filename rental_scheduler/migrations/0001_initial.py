# Generated by Django 5.1.7 on 2025-03-18 23:02

import django.core.validators
import django.db.models.deletion
import rental_scheduler.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Full name of the customer', max_length=200)),
                ('phone', models.CharField(help_text='Contact phone number', max_length=20, validators=[django.core.validators.RegexValidator(message='Enter a valid phone number. Format: +1234567890', regex='^\\+?1?\\d{9,15}$')])),
                ('street_address', models.CharField(help_text='Street address', max_length=200)),
                ('city', models.CharField(help_text='City name', max_length=100)),
                ('state', models.CharField(help_text='Two-letter state code', max_length=2)),
                ('zip_code', models.CharField(help_text='ZIP or postal code', max_length=10)),
                ('po_number', models.CharField(blank=True, help_text='Purchase order number (optional)', max_length=50)),
                ('drivers_license_scan', models.FileField(blank=True, help_text="Scanned copy of driver's license", null=True, upload_to=rental_scheduler.models.get_license_upload_path)),
                ('drivers_license_scanned', models.BooleanField(default=False, help_text='Indicates if a physical license has been scanned')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='SystemSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('winch_price', models.DecimalField(decimal_places=2, help_text='Price charged for winch rental', max_digits=10)),
                ('tax_rate', models.DecimalField(decimal_places=2, help_text='Tax rate as a percentage (e.g., 8.25 for 8.25%)', max_digits=5)),
                ('license_scan_path', models.CharField(help_text='Absolute path where license scans will be stored', max_length=255)),
            ],
            options={
                'verbose_name_plural': 'System Settings',
            },
        ),
        migrations.CreateModel(
            name='TrailerCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(help_text='Category name for grouping trailers', max_length=100)),
            ],
            options={
                'verbose_name_plural': 'Trailer Categories',
            },
        ),
        migrations.CreateModel(
            name='Trailer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(help_text='Unique identifier for the trailer', max_length=50, unique=True)),
                ('size', models.CharField(help_text='Physical dimensions or size classification', max_length=100)),
                ('model', models.CharField(help_text='Trailer model name or description', max_length=100)),
                ('hauling_capacity', models.DecimalField(decimal_places=2, help_text='Maximum weight capacity in tons or pounds', max_digits=10)),
                ('half_day_rate', models.DecimalField(decimal_places=2, help_text='Rate charged for half-day rental', max_digits=10)),
                ('daily_rate', models.DecimalField(decimal_places=2, help_text='Rate charged for full-day rental', max_digits=10)),
                ('weekly_rate', models.DecimalField(decimal_places=2, help_text='Rate charged for weekly rental', max_digits=10)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this trailer is available for rental')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='rental_scheduler.trailercategory')),
            ],
        ),
        migrations.CreateModel(
            name='Contract',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_datetime', models.DateTimeField(help_text='When the rental period begins')),
                ('end_datetime', models.DateTimeField(help_text='When the rental period ends')),
                ('includes_winch', models.BooleanField(default=False, help_text='Whether this rental includes a winch')),
                ('rate', models.DecimalField(blank=True, decimal_places=2, help_text='Calculated rate based on duration', max_digits=10, null=True)),
                ('custom_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Override the standard rate calculation with a custom amount', max_digits=10, null=True)),
                ('extra_mileage', models.DecimalField(decimal_places=2, default=0, help_text='Additional charges for extra mileage', max_digits=10)),
                ('subtotal', models.DecimalField(decimal_places=2, help_text='Subtotal before tax', max_digits=10)),
                ('tax_amount', models.DecimalField(decimal_places=2, help_text='Tax amount calculated', max_digits=10)),
                ('total_amount', models.DecimalField(decimal_places=2, help_text='Total amount including tax', max_digits=10)),
                ('down_payment', models.DecimalField(decimal_places=2, default=0, help_text='Initial payment amount', max_digits=10)),
                ('balance_due', models.DecimalField(decimal_places=2, help_text='Remaining balance to be paid', max_digits=10)),
                ('show_in_calendar', models.BooleanField(default=True, help_text='Whether to display this contract in the calendar view')),
                ('is_picked_up', models.BooleanField(default=False, help_text='Whether the trailer has been picked up')),
                ('pickup_datetime', models.DateTimeField(blank=True, help_text='When the trailer was actually picked up', null=True)),
                ('is_returned', models.BooleanField(default=False, help_text='Whether the trailer has been returned')),
                ('return_datetime', models.DateTimeField(blank=True, help_text='When the trailer was actually returned', null=True)),
                ('payment_type', models.CharField(choices=[('cash', 'Cash'), ('charge', 'Charge')], help_text='Type of payment accepted', max_length=10)),
                ('payment_timing', models.CharField(choices=[('pickup', 'At Pickup'), ('return', 'At Return')], help_text='When payment is due', max_length=10)),
                ('is_billed', models.BooleanField(default=False, help_text='Whether an invoice has been generated')),
                ('is_invoiced', models.BooleanField(default=False, help_text='Whether payment has been received')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='rental_scheduler.customer')),
                ('trailer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='rental_scheduler.trailer')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='rental_scheduler.trailercategory')),
            ],
            options={
                'indexes': [models.Index(fields=['start_datetime'], name='rental_sche_start_d_4f3587_idx'), models.Index(fields=['end_datetime'], name='rental_sche_end_dat_55050e_idx'), models.Index(fields=['is_picked_up'], name='rental_sche_is_pick_60c7d6_idx'), models.Index(fields=['is_returned'], name='rental_sche_is_retu_87412a_idx')],
                'constraints': [models.CheckConstraint(check=models.Q(end_datetime__gt=models.F('start_datetime')), name='end_after_start')],
            },
        ),
    ]
